// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package station

import (
	"context"
	redis2 "github.com/go-redis/redis/v8"
	"github.com/weedge/craftsman/cloudwego/payment/internal/station/consumer"
	"github.com/weedge/craftsman/cloudwego/payment/internal/station/repository/redis"
	"github.com/weedge/craftsman/cloudwego/payment/internal/station/repository/rmq"
	"github.com/weedge/craftsman/cloudwego/payment/internal/station/usecase"
	"github.com/weedge/craftsman/cloudwego/payment/pkg/configparser"
	"github.com/weedge/craftsman/cloudwego/payment/pkg/injectors"
	"github.com/weedge/craftsman/cloudwego/payment/pkg/utils/logutils"
	"golang.org/x/sync/singleflight"
)

// Injectors from wire.go:

// NewServer build server with wire, dependency obj inject, so init random
func NewServer(ctx context.Context) (*Server, error) {
	provider := configparser.Default()
	options, err := Configure(provider)
	if err != nil {
		return nil, err
	}
	serverOptions := options.Server
	rmqProducerClientOptions := options.AssetChangeEventProducer
	redisClusterClientOptions := options.RedisClusterClient
	universalClient := injectors.InitRedisClusterDefaultClient(redisClusterClientOptions)
	paymentDaClientOptions := options.PaymentDaClient
	client, err := injectors.InitPaymentDaClient(paymentDaClientOptions)
	if err != nil {
		return nil, err
	}
	v := ProvideUniversalClients(universalClient)
	redsync := injectors.InitRedsync(v...)
	iUserAssetRepository := redis.NewUserAssetRepository(universalClient)
	group := _wireGroupValue
	iUserAssetCallBack := redis.NewUserAssetCallBack(client, redsync, iUserAssetRepository, group)
	string2 := options.UserAssetTxMethod
	iUserAssetEventRepository := redis.NewUserAssetEventRepository(universalClient, iUserAssetCallBack, string2)
	iUserAssetEventMsgListener := rmq.NewUserAssetEventMsgLister(iUserAssetEventRepository)
	transactionProducer, err := injectors.InitRmqTransactionProducerClient(rmqProducerClientOptions, iUserAssetEventMsgListener)
	if err != nil {
		return nil, err
	}
	iUserAssetEventMsgRepository := rmq.NewUserAssetEventMsg(transactionProducer, iUserAssetEventRepository)
	iUserAssetEventUseCase := usecase.NewUserAssetEventUseCase(iUserAssetEventMsgRepository, iUserAssetEventRepository)
	paymentService := NewService(iUserAssetEventUseCase)
	level := serverOptions.LogLevel
	v2 := serverOptions.LogMeta
	iKitexZapKVLogger := logutils.NewkitexZapKVLogger(level, v2)
	v3 := options.RmqConsumers
	v4 := consumer.RegisterUserAssetEvent(v3, iUserAssetEventUseCase)
	server := &Server{
		opts:                serverOptions,
		svc:                 paymentService,
		kitexKVLogger:       iKitexZapKVLogger,
		rmqConsumerOpts:     v3,
		mapSubscribeHandler: v4,
		txProducer:          transactionProducer,
	}
	return server, nil
}

var (
	_wireGroupValue = &singleflight.Group{}
)

// wire.go:

func ProvideUniversalClients(
	c redis2.UniversalClient,
) []redis2.UniversalClient {
	return []redis2.UniversalClient{
		c,
	}
}
