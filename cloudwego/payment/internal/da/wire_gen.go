// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package da

import (
	"context"
	"github.com/weedge/craftsman/cloudwego/payment/internal/da/consumer"
	"github.com/weedge/craftsman/cloudwego/payment/internal/da/repository/mysql"
	"github.com/weedge/craftsman/cloudwego/payment/pkg/configparser"
	"github.com/weedge/craftsman/cloudwego/payment/pkg/injectors"
	"github.com/weedge/craftsman/cloudwego/payment/pkg/utils/logutils"
)

// Injectors from wire.go:

// NewServer build server with wire
func NewServer(ctx context.Context) (*Server, error) {
	provider := configparser.Default()
	options, err := Configure(provider)
	if err != nil {
		return nil, err
	}
	serverOptions := options.Server
	mysqlDBClientOptions := options.MysqlDBClient
	level := serverOptions.LogLevel
	v := serverOptions.LogMeta
	iKitexZapKVLogger := logutils.NewkitexZapKVLogger(level, v)
	db, err := injectors.InitMysqlDBClient(mysqlDBClientOptions, iKitexZapKVLogger)
	if err != nil {
		return nil, err
	}
	iUserAssetRepository := mysql.NewUserAssetRepository(db)
	paymentService := NewSvc(iUserAssetRepository)
	v2 := options.RmqConsumers
	v3 := consumer.Init(v2)
	server := &Server{
		opts:                serverOptions,
		svc:                 paymentService,
		kitexKVLogger:       iKitexZapKVLogger,
		rmqConsumerOpts:     v2,
		mapSubscribeHandler: v3,
	}
	return server, nil
}
