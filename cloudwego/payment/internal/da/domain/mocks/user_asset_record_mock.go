// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/da/domain/user_asset_record.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/weedge/craftsman/cloudwego/payment/internal/da/model"
)

// MockIUserAssetRecordRepository is a mock of IUserAssetRecordRepository interface.
type MockIUserAssetRecordRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserAssetRecordRepositoryMockRecorder
}

// MockIUserAssetRecordRepositoryMockRecorder is the mock recorder for MockIUserAssetRecordRepository.
type MockIUserAssetRecordRepositoryMockRecorder struct {
	mock *MockIUserAssetRecordRepository
}

// NewMockIUserAssetRecordRepository creates a new mock instance.
func NewMockIUserAssetRecordRepository(ctrl *gomock.Controller) *MockIUserAssetRecordRepository {
	mock := &MockIUserAssetRecordRepository{ctrl: ctrl}
	mock.recorder = &MockIUserAssetRecordRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserAssetRecordRepository) EXPECT() *MockIUserAssetRecordRepositoryMockRecorder {
	return m.recorder
}

// GetRecordsByUserId mocks base method.
func (m *MockIUserAssetRecordRepository) GetRecordsByUserId(ctx context.Context, userId int64) ([]model.UserAssetRecord, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecordsByUserId", ctx, userId)
	ret0, _ := ret[0].([]model.UserAssetRecord)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRecordsByUserId indicates an expected call of GetRecordsByUserId.
func (mr *MockIUserAssetRecordRepositoryMockRecorder) GetRecordsByUserId(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordsByUserId", reflect.TypeOf((*MockIUserAssetRecordRepository)(nil).GetRecordsByUserId), ctx, userId)
}

// MockIUserAssetRecordUseCase is a mock of IUserAssetRecordUseCase interface.
type MockIUserAssetRecordUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIUserAssetRecordUseCaseMockRecorder
}

// MockIUserAssetRecordUseCaseMockRecorder is the mock recorder for MockIUserAssetRecordUseCase.
type MockIUserAssetRecordUseCaseMockRecorder struct {
	mock *MockIUserAssetRecordUseCase
}

// NewMockIUserAssetRecordUseCase creates a new mock instance.
func NewMockIUserAssetRecordUseCase(ctrl *gomock.Controller) *MockIUserAssetRecordUseCase {
	mock := &MockIUserAssetRecordUseCase{ctrl: ctrl}
	mock.recorder = &MockIUserAssetRecordUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserAssetRecordUseCase) EXPECT() *MockIUserAssetRecordUseCaseMockRecorder {
	return m.recorder
}

// GetRecordsByUserId mocks base method.
func (m *MockIUserAssetRecordUseCase) GetRecordsByUserId(ctx context.Context, userId int64) ([]model.UserAssetRecord, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecordsByUserId", ctx, userId)
	ret0, _ := ret[0].([]model.UserAssetRecord)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRecordsByUserId indicates an expected call of GetRecordsByUserId.
func (mr *MockIUserAssetRecordUseCaseMockRecorder) GetRecordsByUserId(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordsByUserId", reflect.TypeOf((*MockIUserAssetRecordUseCase)(nil).GetRecordsByUserId), ctx, userId)
}
