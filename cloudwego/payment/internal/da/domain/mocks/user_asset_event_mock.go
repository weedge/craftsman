// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/da/domain/user_asset_event.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	station "github.com/weedge/craftsman/cloudwego/common/kitex_gen/payment/station"
)

// MockIUserAssetEventRepository is a mock of IUserAssetEventRepository interface.
type MockIUserAssetEventRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserAssetEventRepositoryMockRecorder
}

// MockIUserAssetEventRepositoryMockRecorder is the mock recorder for MockIUserAssetEventRepository.
type MockIUserAssetEventRepositoryMockRecorder struct {
	mock *MockIUserAssetEventRepository
}

// NewMockIUserAssetEventRepository creates a new mock instance.
func NewMockIUserAssetEventRepository(ctrl *gomock.Controller) *MockIUserAssetEventRepository {
	mock := &MockIUserAssetEventRepository{ctrl: ctrl}
	mock.recorder = &MockIUserAssetEventRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserAssetEventRepository) EXPECT() *MockIUserAssetEventRepositoryMockRecorder {
	return m.recorder
}

// ChangeUsersAssetTx mocks base method.
func (m *MockIUserAssetEventRepository) ChangeUsersAssetTx(ctx context.Context, event *station.BizEventAssetChange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUsersAssetTx", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUsersAssetTx indicates an expected call of ChangeUsersAssetTx.
func (mr *MockIUserAssetEventRepositoryMockRecorder) ChangeUsersAssetTx(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUsersAssetTx", reflect.TypeOf((*MockIUserAssetEventRepository)(nil).ChangeUsersAssetTx), ctx, event)
}

// MockIUserAssetEventUseCase is a mock of IUserAssetEventUseCase interface.
type MockIUserAssetEventUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIUserAssetEventUseCaseMockRecorder
}

// MockIUserAssetEventUseCaseMockRecorder is the mock recorder for MockIUserAssetEventUseCase.
type MockIUserAssetEventUseCaseMockRecorder struct {
	mock *MockIUserAssetEventUseCase
}

// NewMockIUserAssetEventUseCase creates a new mock instance.
func NewMockIUserAssetEventUseCase(ctrl *gomock.Controller) *MockIUserAssetEventUseCase {
	mock := &MockIUserAssetEventUseCase{ctrl: ctrl}
	mock.recorder = &MockIUserAssetEventUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserAssetEventUseCase) EXPECT() *MockIUserAssetEventUseCaseMockRecorder {
	return m.recorder
}

// ChangeUsersAssetTx mocks base method.
func (m *MockIUserAssetEventUseCase) ChangeUsersAssetTx(ctx context.Context, event *station.BizEventAssetChange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUsersAssetTx", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUsersAssetTx indicates an expected call of ChangeUsersAssetTx.
func (mr *MockIUserAssetEventUseCaseMockRecorder) ChangeUsersAssetTx(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUsersAssetTx", reflect.TypeOf((*MockIUserAssetEventUseCase)(nil).ChangeUsersAssetTx), ctx, event)
}
