// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/weedge/craftsman/cloudwego/payment/internal/da/model"
)

func newUserAssetRecord(db *gorm.DB, opts ...gen.DOOption) userAssetRecord {
	_userAssetRecord := userAssetRecord{}

	_userAssetRecord.userAssetRecordDo.UseDB(db, opts...)
	_userAssetRecord.userAssetRecordDo.UseModel(&model.UserAssetRecord{})

	tableName := _userAssetRecord.userAssetRecordDo.TableName()
	_userAssetRecord.ALL = field.NewAsterisk(tableName)
	_userAssetRecord.UserID = field.NewInt64(tableName, "userId")
	_userAssetRecord.OpUserType = field.NewInt32(tableName, "opUserType")
	_userAssetRecord.BizID = field.NewInt64(tableName, "bizId")
	_userAssetRecord.BizType = field.NewInt32(tableName, "bizType")
	_userAssetRecord.ObjID = field.NewString(tableName, "objId")
	_userAssetRecord.EventID = field.NewString(tableName, "eventId")
	_userAssetRecord.EventType = field.NewString(tableName, "eventType")
	_userAssetRecord.Record = field.NewString(tableName, "record")
	_userAssetRecord.RecordOp = field.NewString(tableName, "recordOp")
	_userAssetRecord.CreatedAt = field.NewTime(tableName, "createdAt")
	_userAssetRecord.UpdatedAt = field.NewTime(tableName, "updatedAt")

	_userAssetRecord.fillFieldMap()

	return _userAssetRecord
}

type userAssetRecord struct {
	userAssetRecordDo userAssetRecordDo

	ALL        field.Asterisk
	UserID     field.Int64
	OpUserType field.Int32
	BizID      field.Int64
	BizType    field.Int32
	ObjID      field.String
	EventID    field.String
	EventType  field.String
	Record     field.String
	RecordOp   field.String
	CreatedAt  field.Time
	UpdatedAt  field.Time

	fieldMap map[string]field.Expr
}

func (u userAssetRecord) Table(newTableName string) *userAssetRecord {
	u.userAssetRecordDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userAssetRecord) As(alias string) *userAssetRecord {
	u.userAssetRecordDo.DO = *(u.userAssetRecordDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userAssetRecord) updateTableName(table string) *userAssetRecord {
	u.ALL = field.NewAsterisk(table)
	u.UserID = field.NewInt64(table, "userId")
	u.OpUserType = field.NewInt32(table, "opUserType")
	u.BizID = field.NewInt64(table, "bizId")
	u.BizType = field.NewInt32(table, "bizType")
	u.ObjID = field.NewString(table, "objId")
	u.EventID = field.NewString(table, "eventId")
	u.EventType = field.NewString(table, "eventType")
	u.Record = field.NewString(table, "record")
	u.RecordOp = field.NewString(table, "recordOp")
	u.CreatedAt = field.NewTime(table, "createdAt")
	u.UpdatedAt = field.NewTime(table, "updatedAt")

	u.fillFieldMap()

	return u
}

func (u *userAssetRecord) WithContext(ctx context.Context) *userAssetRecordDo {
	return u.userAssetRecordDo.WithContext(ctx)
}

func (u userAssetRecord) TableName() string { return u.userAssetRecordDo.TableName() }

func (u userAssetRecord) Alias() string { return u.userAssetRecordDo.Alias() }

func (u *userAssetRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userAssetRecord) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 11)
	u.fieldMap["userId"] = u.UserID
	u.fieldMap["opUserType"] = u.OpUserType
	u.fieldMap["bizId"] = u.BizID
	u.fieldMap["bizType"] = u.BizType
	u.fieldMap["objId"] = u.ObjID
	u.fieldMap["eventId"] = u.EventID
	u.fieldMap["eventType"] = u.EventType
	u.fieldMap["record"] = u.Record
	u.fieldMap["recordOp"] = u.RecordOp
	u.fieldMap["createdAt"] = u.CreatedAt
	u.fieldMap["updatedAt"] = u.UpdatedAt
}

func (u userAssetRecord) clone(db *gorm.DB) userAssetRecord {
	u.userAssetRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userAssetRecord) replaceDB(db *gorm.DB) userAssetRecord {
	u.userAssetRecordDo.ReplaceDB(db)
	return u
}

type userAssetRecordDo struct{ gen.DO }

func (u userAssetRecordDo) Debug() *userAssetRecordDo {
	return u.withDO(u.DO.Debug())
}

func (u userAssetRecordDo) WithContext(ctx context.Context) *userAssetRecordDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userAssetRecordDo) ReadDB() *userAssetRecordDo {
	return u.Clauses(dbresolver.Read)
}

func (u userAssetRecordDo) WriteDB() *userAssetRecordDo {
	return u.Clauses(dbresolver.Write)
}

func (u userAssetRecordDo) Session(config *gorm.Session) *userAssetRecordDo {
	return u.withDO(u.DO.Session(config))
}

func (u userAssetRecordDo) Clauses(conds ...clause.Expression) *userAssetRecordDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userAssetRecordDo) Returning(value interface{}, columns ...string) *userAssetRecordDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userAssetRecordDo) Not(conds ...gen.Condition) *userAssetRecordDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userAssetRecordDo) Or(conds ...gen.Condition) *userAssetRecordDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userAssetRecordDo) Select(conds ...field.Expr) *userAssetRecordDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userAssetRecordDo) Where(conds ...gen.Condition) *userAssetRecordDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userAssetRecordDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *userAssetRecordDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userAssetRecordDo) Order(conds ...field.Expr) *userAssetRecordDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userAssetRecordDo) Distinct(cols ...field.Expr) *userAssetRecordDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userAssetRecordDo) Omit(cols ...field.Expr) *userAssetRecordDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userAssetRecordDo) Join(table schema.Tabler, on ...field.Expr) *userAssetRecordDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userAssetRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userAssetRecordDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userAssetRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) *userAssetRecordDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userAssetRecordDo) Group(cols ...field.Expr) *userAssetRecordDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userAssetRecordDo) Having(conds ...gen.Condition) *userAssetRecordDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userAssetRecordDo) Limit(limit int) *userAssetRecordDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userAssetRecordDo) Offset(offset int) *userAssetRecordDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userAssetRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userAssetRecordDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userAssetRecordDo) Unscoped() *userAssetRecordDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userAssetRecordDo) Create(values ...*model.UserAssetRecord) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userAssetRecordDo) CreateInBatches(values []*model.UserAssetRecord, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userAssetRecordDo) Save(values ...*model.UserAssetRecord) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userAssetRecordDo) First() (*model.UserAssetRecord, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAssetRecord), nil
	}
}

func (u userAssetRecordDo) Take() (*model.UserAssetRecord, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAssetRecord), nil
	}
}

func (u userAssetRecordDo) Last() (*model.UserAssetRecord, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAssetRecord), nil
	}
}

func (u userAssetRecordDo) Find() ([]*model.UserAssetRecord, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserAssetRecord), err
}

func (u userAssetRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserAssetRecord, err error) {
	buf := make([]*model.UserAssetRecord, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userAssetRecordDo) FindInBatches(result *[]*model.UserAssetRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userAssetRecordDo) Attrs(attrs ...field.AssignExpr) *userAssetRecordDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userAssetRecordDo) Assign(attrs ...field.AssignExpr) *userAssetRecordDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userAssetRecordDo) Joins(fields ...field.RelationField) *userAssetRecordDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userAssetRecordDo) Preload(fields ...field.RelationField) *userAssetRecordDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userAssetRecordDo) FirstOrInit() (*model.UserAssetRecord, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAssetRecord), nil
	}
}

func (u userAssetRecordDo) FirstOrCreate() (*model.UserAssetRecord, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAssetRecord), nil
	}
}

func (u userAssetRecordDo) FindByPage(offset int, limit int) (result []*model.UserAssetRecord, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userAssetRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userAssetRecordDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userAssetRecordDo) Delete(models ...*model.UserAssetRecord) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userAssetRecordDo) withDO(do gen.Dao) *userAssetRecordDo {
	u.DO = *do.(*gen.DO)
	return u
}
