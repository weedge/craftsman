// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/weedge/craftsman/cloudwego/payment/internal/da/model"
)

func newUserAssertRecord(db *gorm.DB, opts ...gen.DOOption) userAssertRecord {
	_userAssertRecord := userAssertRecord{}

	_userAssertRecord.userAssertRecordDo.UseDB(db, opts...)
	_userAssertRecord.userAssertRecordDo.UseModel(&model.UserAssertRecord{})

	tableName := _userAssertRecord.userAssertRecordDo.TableName()
	_userAssertRecord.ALL = field.NewAsterisk(tableName)
	_userAssertRecord.RecordID = field.NewInt64(tableName, "recordId")
	_userAssertRecord.OpUserID = field.NewInt64(tableName, "opUserId")
	_userAssertRecord.ToUserID = field.NewInt64(tableName, "toUserId")
	_userAssertRecord.BizID = field.NewInt64(tableName, "bizId")
	_userAssertRecord.BizType = field.NewInt32(tableName, "bizType")
	_userAssertRecord.ObjID = field.NewString(tableName, "objId")
	_userAssertRecord.EventID = field.NewString(tableName, "eventId")
	_userAssertRecord.EventType = field.NewString(tableName, "eventType")
	_userAssertRecord.Record = field.NewString(tableName, "record")
	_userAssertRecord.RecordOp = field.NewString(tableName, "recordOp")
	_userAssertRecord.CreatedAt = field.NewTime(tableName, "createdAt")
	_userAssertRecord.UpdatedAt = field.NewTime(tableName, "updatedAt")

	_userAssertRecord.fillFieldMap()

	return _userAssertRecord
}

type userAssertRecord struct {
	userAssertRecordDo userAssertRecordDo

	ALL       field.Asterisk
	RecordID  field.Int64
	OpUserID  field.Int64
	ToUserID  field.Int64
	BizID     field.Int64
	BizType   field.Int32
	ObjID     field.String
	EventID   field.String
	EventType field.String
	Record    field.String
	RecordOp  field.String
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (u userAssertRecord) Table(newTableName string) *userAssertRecord {
	u.userAssertRecordDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userAssertRecord) As(alias string) *userAssertRecord {
	u.userAssertRecordDo.DO = *(u.userAssertRecordDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userAssertRecord) updateTableName(table string) *userAssertRecord {
	u.ALL = field.NewAsterisk(table)
	u.RecordID = field.NewInt64(table, "recordId")
	u.OpUserID = field.NewInt64(table, "opUserId")
	u.ToUserID = field.NewInt64(table, "toUserId")
	u.BizID = field.NewInt64(table, "bizId")
	u.BizType = field.NewInt32(table, "bizType")
	u.ObjID = field.NewString(table, "objId")
	u.EventID = field.NewString(table, "eventId")
	u.EventType = field.NewString(table, "eventType")
	u.Record = field.NewString(table, "record")
	u.RecordOp = field.NewString(table, "recordOp")
	u.CreatedAt = field.NewTime(table, "createdAt")
	u.UpdatedAt = field.NewTime(table, "updatedAt")

	u.fillFieldMap()

	return u
}

func (u *userAssertRecord) WithContext(ctx context.Context) *userAssertRecordDo {
	return u.userAssertRecordDo.WithContext(ctx)
}

func (u userAssertRecord) TableName() string { return u.userAssertRecordDo.TableName() }

func (u userAssertRecord) Alias() string { return u.userAssertRecordDo.Alias() }

func (u *userAssertRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userAssertRecord) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 12)
	u.fieldMap["recordId"] = u.RecordID
	u.fieldMap["opUserId"] = u.OpUserID
	u.fieldMap["toUserId"] = u.ToUserID
	u.fieldMap["bizId"] = u.BizID
	u.fieldMap["bizType"] = u.BizType
	u.fieldMap["objId"] = u.ObjID
	u.fieldMap["eventId"] = u.EventID
	u.fieldMap["eventType"] = u.EventType
	u.fieldMap["record"] = u.Record
	u.fieldMap["recordOp"] = u.RecordOp
	u.fieldMap["createdAt"] = u.CreatedAt
	u.fieldMap["updatedAt"] = u.UpdatedAt
}

func (u userAssertRecord) clone(db *gorm.DB) userAssertRecord {
	u.userAssertRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userAssertRecord) replaceDB(db *gorm.DB) userAssertRecord {
	u.userAssertRecordDo.ReplaceDB(db)
	return u
}

type userAssertRecordDo struct{ gen.DO }

func (u userAssertRecordDo) Debug() *userAssertRecordDo {
	return u.withDO(u.DO.Debug())
}

func (u userAssertRecordDo) WithContext(ctx context.Context) *userAssertRecordDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userAssertRecordDo) ReadDB() *userAssertRecordDo {
	return u.Clauses(dbresolver.Read)
}

func (u userAssertRecordDo) WriteDB() *userAssertRecordDo {
	return u.Clauses(dbresolver.Write)
}

func (u userAssertRecordDo) Session(config *gorm.Session) *userAssertRecordDo {
	return u.withDO(u.DO.Session(config))
}

func (u userAssertRecordDo) Clauses(conds ...clause.Expression) *userAssertRecordDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userAssertRecordDo) Returning(value interface{}, columns ...string) *userAssertRecordDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userAssertRecordDo) Not(conds ...gen.Condition) *userAssertRecordDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userAssertRecordDo) Or(conds ...gen.Condition) *userAssertRecordDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userAssertRecordDo) Select(conds ...field.Expr) *userAssertRecordDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userAssertRecordDo) Where(conds ...gen.Condition) *userAssertRecordDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userAssertRecordDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *userAssertRecordDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userAssertRecordDo) Order(conds ...field.Expr) *userAssertRecordDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userAssertRecordDo) Distinct(cols ...field.Expr) *userAssertRecordDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userAssertRecordDo) Omit(cols ...field.Expr) *userAssertRecordDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userAssertRecordDo) Join(table schema.Tabler, on ...field.Expr) *userAssertRecordDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userAssertRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userAssertRecordDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userAssertRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) *userAssertRecordDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userAssertRecordDo) Group(cols ...field.Expr) *userAssertRecordDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userAssertRecordDo) Having(conds ...gen.Condition) *userAssertRecordDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userAssertRecordDo) Limit(limit int) *userAssertRecordDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userAssertRecordDo) Offset(offset int) *userAssertRecordDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userAssertRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userAssertRecordDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userAssertRecordDo) Unscoped() *userAssertRecordDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userAssertRecordDo) Create(values ...*model.UserAssertRecord) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userAssertRecordDo) CreateInBatches(values []*model.UserAssertRecord, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userAssertRecordDo) Save(values ...*model.UserAssertRecord) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userAssertRecordDo) First() (*model.UserAssertRecord, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAssertRecord), nil
	}
}

func (u userAssertRecordDo) Take() (*model.UserAssertRecord, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAssertRecord), nil
	}
}

func (u userAssertRecordDo) Last() (*model.UserAssertRecord, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAssertRecord), nil
	}
}

func (u userAssertRecordDo) Find() ([]*model.UserAssertRecord, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserAssertRecord), err
}

func (u userAssertRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserAssertRecord, err error) {
	buf := make([]*model.UserAssertRecord, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userAssertRecordDo) FindInBatches(result *[]*model.UserAssertRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userAssertRecordDo) Attrs(attrs ...field.AssignExpr) *userAssertRecordDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userAssertRecordDo) Assign(attrs ...field.AssignExpr) *userAssertRecordDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userAssertRecordDo) Joins(fields ...field.RelationField) *userAssertRecordDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userAssertRecordDo) Preload(fields ...field.RelationField) *userAssertRecordDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userAssertRecordDo) FirstOrInit() (*model.UserAssertRecord, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAssertRecord), nil
	}
}

func (u userAssertRecordDo) FirstOrCreate() (*model.UserAssertRecord, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAssertRecord), nil
	}
}

func (u userAssertRecordDo) FindByPage(offset int, limit int) (result []*model.UserAssertRecord, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userAssertRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userAssertRecordDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userAssertRecordDo) Delete(models ...*model.UserAssertRecord) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userAssertRecordDo) withDO(do gen.Dao) *userAssertRecordDo {
	u.DO = *do.(*gen.DO)
	return u
}
