// Code generated by thriftgo (0.2.3). DO NOT EDIT.

package station

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/weedge/craftsman/cloudwego/common/kitex_gen/base"
	base0 "github.com/weedge/craftsman/cloudwego/common/kitex_gen/payment/base"
	"strings"
)

type BizAssetChangesReq struct {
	BizAssetChanges []*BizEventAssetChange `thrift:"bizAssetChanges,1,required" json:"bizAssetChanges"`
}

func NewBizAssetChangesReq() *BizAssetChangesReq {
	return &BizAssetChangesReq{}
}

func (p *BizAssetChangesReq) GetBizAssetChanges() (v []*BizEventAssetChange) {
	return p.BizAssetChanges
}
func (p *BizAssetChangesReq) SetBizAssetChanges(val []*BizEventAssetChange) {
	p.BizAssetChanges = val
}

var fieldIDToName_BizAssetChangesReq = map[int16]string{
	1: "bizAssetChanges",
}

func (p *BizAssetChangesReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBizAssetChanges bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetBizAssetChanges = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBizAssetChanges {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BizAssetChangesReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BizAssetChangesReq[fieldId]))
}

func (p *BizAssetChangesReq) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.BizAssetChanges = make([]*BizEventAssetChange, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewBizEventAssetChange()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.BizAssetChanges = append(p.BizAssetChanges, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *BizAssetChangesReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BizAssetChangesReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BizAssetChangesReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("bizAssetChanges", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.BizAssetChanges)); err != nil {
		return err
	}
	for _, v := range p.BizAssetChanges {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BizAssetChangesReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BizAssetChangesReq(%+v)", *p)
}

func (p *BizAssetChangesReq) DeepEqual(ano *BizAssetChangesReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BizAssetChanges) {
		return false
	}
	return true
}

func (p *BizAssetChangesReq) Field1DeepEqual(src []*BizEventAssetChange) bool {

	if len(p.BizAssetChanges) != len(src) {
		return false
	}
	for i, v := range p.BizAssetChanges {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type BizEventAssetChange struct {
	EventId           string               `thrift:"eventId,1,required" json:"eventId"`
	OpUserId          int64                `thrift:"opUserId,2,required" json:"opUserId"`
	EventType         base0.EventType      `thrift:"eventType,3,required" json:"eventType"`
	BizId             int64                `thrift:"bizId,4,required" json:"bizId"`
	BizType           base0.BizType        `thrift:"bizType,5,required" json:"bizType"`
	ObjId             string               `thrift:"objId,6,required" json:"objId"`
	OpUserAssetChange *UserAssetChangeInfo `thrift:"opUserAssetChange,7,required" json:"opUserAssetChange"`
	ToUserAssetChange *UserAssetChangeInfo `thrift:"toUserAssetChange,8,required" json:"toUserAssetChange"`
}

func NewBizEventAssetChange() *BizEventAssetChange {
	return &BizEventAssetChange{}
}

func (p *BizEventAssetChange) GetEventId() (v string) {
	return p.EventId
}

func (p *BizEventAssetChange) GetOpUserId() (v int64) {
	return p.OpUserId
}

func (p *BizEventAssetChange) GetEventType() (v base0.EventType) {
	return p.EventType
}

func (p *BizEventAssetChange) GetBizId() (v int64) {
	return p.BizId
}

func (p *BizEventAssetChange) GetBizType() (v base0.BizType) {
	return p.BizType
}

func (p *BizEventAssetChange) GetObjId() (v string) {
	return p.ObjId
}

var BizEventAssetChange_OpUserAssetChange_DEFAULT *UserAssetChangeInfo

func (p *BizEventAssetChange) GetOpUserAssetChange() (v *UserAssetChangeInfo) {
	if !p.IsSetOpUserAssetChange() {
		return BizEventAssetChange_OpUserAssetChange_DEFAULT
	}
	return p.OpUserAssetChange
}

var BizEventAssetChange_ToUserAssetChange_DEFAULT *UserAssetChangeInfo

func (p *BizEventAssetChange) GetToUserAssetChange() (v *UserAssetChangeInfo) {
	if !p.IsSetToUserAssetChange() {
		return BizEventAssetChange_ToUserAssetChange_DEFAULT
	}
	return p.ToUserAssetChange
}
func (p *BizEventAssetChange) SetEventId(val string) {
	p.EventId = val
}
func (p *BizEventAssetChange) SetOpUserId(val int64) {
	p.OpUserId = val
}
func (p *BizEventAssetChange) SetEventType(val base0.EventType) {
	p.EventType = val
}
func (p *BizEventAssetChange) SetBizId(val int64) {
	p.BizId = val
}
func (p *BizEventAssetChange) SetBizType(val base0.BizType) {
	p.BizType = val
}
func (p *BizEventAssetChange) SetObjId(val string) {
	p.ObjId = val
}
func (p *BizEventAssetChange) SetOpUserAssetChange(val *UserAssetChangeInfo) {
	p.OpUserAssetChange = val
}
func (p *BizEventAssetChange) SetToUserAssetChange(val *UserAssetChangeInfo) {
	p.ToUserAssetChange = val
}

var fieldIDToName_BizEventAssetChange = map[int16]string{
	1: "eventId",
	2: "opUserId",
	3: "eventType",
	4: "bizId",
	5: "bizType",
	6: "objId",
	7: "opUserAssetChange",
	8: "toUserAssetChange",
}

func (p *BizEventAssetChange) IsSetOpUserAssetChange() bool {
	return p.OpUserAssetChange != nil
}

func (p *BizEventAssetChange) IsSetToUserAssetChange() bool {
	return p.ToUserAssetChange != nil
}

func (p *BizEventAssetChange) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEventId bool = false
	var issetOpUserId bool = false
	var issetEventType bool = false
	var issetBizId bool = false
	var issetBizType bool = false
	var issetObjId bool = false
	var issetOpUserAssetChange bool = false
	var issetToUserAssetChange bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEventId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetOpUserId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetEventType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetBizId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetBizType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetObjId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetOpUserAssetChange = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetToUserAssetChange = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEventId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetOpUserId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetEventType {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetBizId {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetBizType {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetObjId {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetOpUserAssetChange {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetToUserAssetChange {
		fieldId = 8
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BizEventAssetChange[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BizEventAssetChange[fieldId]))
}

func (p *BizEventAssetChange) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.EventId = v
	}
	return nil
}

func (p *BizEventAssetChange) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.OpUserId = v
	}
	return nil
}

func (p *BizEventAssetChange) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.EventType = base0.EventType(v)
	}
	return nil
}

func (p *BizEventAssetChange) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.BizId = v
	}
	return nil
}

func (p *BizEventAssetChange) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.BizType = base0.BizType(v)
	}
	return nil
}

func (p *BizEventAssetChange) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ObjId = v
	}
	return nil
}

func (p *BizEventAssetChange) ReadField7(iprot thrift.TProtocol) error {
	p.OpUserAssetChange = NewUserAssetChangeInfo()
	if err := p.OpUserAssetChange.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BizEventAssetChange) ReadField8(iprot thrift.TProtocol) error {
	p.ToUserAssetChange = NewUserAssetChangeInfo()
	if err := p.ToUserAssetChange.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BizEventAssetChange) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BizEventAssetChange"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BizEventAssetChange) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("eventId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.EventId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BizEventAssetChange) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("opUserId", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.OpUserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BizEventAssetChange) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("eventType", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.EventType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BizEventAssetChange) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("bizId", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.BizId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *BizEventAssetChange) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("bizType", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.BizType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *BizEventAssetChange) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("objId", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ObjId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *BizEventAssetChange) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("opUserAssetChange", thrift.STRUCT, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.OpUserAssetChange.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *BizEventAssetChange) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("toUserAssetChange", thrift.STRUCT, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ToUserAssetChange.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *BizEventAssetChange) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BizEventAssetChange(%+v)", *p)
}

func (p *BizEventAssetChange) DeepEqual(ano *BizEventAssetChange) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EventId) {
		return false
	}
	if !p.Field2DeepEqual(ano.OpUserId) {
		return false
	}
	if !p.Field3DeepEqual(ano.EventType) {
		return false
	}
	if !p.Field4DeepEqual(ano.BizId) {
		return false
	}
	if !p.Field5DeepEqual(ano.BizType) {
		return false
	}
	if !p.Field6DeepEqual(ano.ObjId) {
		return false
	}
	if !p.Field7DeepEqual(ano.OpUserAssetChange) {
		return false
	}
	if !p.Field8DeepEqual(ano.ToUserAssetChange) {
		return false
	}
	return true
}

func (p *BizEventAssetChange) Field1DeepEqual(src string) bool {

	if strings.Compare(p.EventId, src) != 0 {
		return false
	}
	return true
}
func (p *BizEventAssetChange) Field2DeepEqual(src int64) bool {

	if p.OpUserId != src {
		return false
	}
	return true
}
func (p *BizEventAssetChange) Field3DeepEqual(src base0.EventType) bool {

	if p.EventType != src {
		return false
	}
	return true
}
func (p *BizEventAssetChange) Field4DeepEqual(src int64) bool {

	if p.BizId != src {
		return false
	}
	return true
}
func (p *BizEventAssetChange) Field5DeepEqual(src base0.BizType) bool {

	if p.BizType != src {
		return false
	}
	return true
}
func (p *BizEventAssetChange) Field6DeepEqual(src string) bool {

	if strings.Compare(p.ObjId, src) != 0 {
		return false
	}
	return true
}
func (p *BizEventAssetChange) Field7DeepEqual(src *UserAssetChangeInfo) bool {

	if !p.OpUserAssetChange.DeepEqual(src) {
		return false
	}
	return true
}
func (p *BizEventAssetChange) Field8DeepEqual(src *UserAssetChangeInfo) bool {

	if !p.ToUserAssetChange.DeepEqual(src) {
		return false
	}
	return true
}

type UserAssetChangeInfo struct {
	UserId    int64           `thrift:"userId,1,required" json:"userId"`
	AssetType base0.AssetType `thrift:"assetType,2,required" json:"assetType"`
	Incr      int32           `thrift:"incr,3,required" json:"incr"`
}

func NewUserAssetChangeInfo() *UserAssetChangeInfo {
	return &UserAssetChangeInfo{}
}

func (p *UserAssetChangeInfo) GetUserId() (v int64) {
	return p.UserId
}

func (p *UserAssetChangeInfo) GetAssetType() (v base0.AssetType) {
	return p.AssetType
}

func (p *UserAssetChangeInfo) GetIncr() (v int32) {
	return p.Incr
}
func (p *UserAssetChangeInfo) SetUserId(val int64) {
	p.UserId = val
}
func (p *UserAssetChangeInfo) SetAssetType(val base0.AssetType) {
	p.AssetType = val
}
func (p *UserAssetChangeInfo) SetIncr(val int32) {
	p.Incr = val
}

var fieldIDToName_UserAssetChangeInfo = map[int16]string{
	1: "userId",
	2: "assetType",
	3: "incr",
}

func (p *UserAssetChangeInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetUserId bool = false
	var issetAssetType bool = false
	var issetIncr bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetUserId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetAssetType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetIncr = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetUserId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetAssetType {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetIncr {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UserAssetChangeInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UserAssetChangeInfo[fieldId]))
}

func (p *UserAssetChangeInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *UserAssetChangeInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.AssetType = base0.AssetType(v)
	}
	return nil
}

func (p *UserAssetChangeInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Incr = v
	}
	return nil
}

func (p *UserAssetChangeInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UserAssetChangeInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UserAssetChangeInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UserAssetChangeInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("assetType", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.AssetType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UserAssetChangeInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("incr", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Incr); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UserAssetChangeInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserAssetChangeInfo(%+v)", *p)
}

func (p *UserAssetChangeInfo) DeepEqual(ano *UserAssetChangeInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.AssetType) {
		return false
	}
	if !p.Field3DeepEqual(ano.Incr) {
		return false
	}
	return true
}

func (p *UserAssetChangeInfo) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *UserAssetChangeInfo) Field2DeepEqual(src base0.AssetType) bool {

	if p.AssetType != src {
		return false
	}
	return true
}
func (p *UserAssetChangeInfo) Field3DeepEqual(src int32) bool {

	if p.Incr != src {
		return false
	}
	return true
}

type BizAssetChangesResp struct {
	BizAssetChangeResList []*BizEventAssetChangerRes `thrift:"bizAssetChangeResList,1,required" json:"bizAssetChangeResList"`
	BaseResp              *base.BaseResp             `thrift:"baseResp,255,required" json:"baseResp"`
}

func NewBizAssetChangesResp() *BizAssetChangesResp {
	return &BizAssetChangesResp{}
}

func (p *BizAssetChangesResp) GetBizAssetChangeResList() (v []*BizEventAssetChangerRes) {
	return p.BizAssetChangeResList
}

var BizAssetChangesResp_BaseResp_DEFAULT *base.BaseResp

func (p *BizAssetChangesResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return BizAssetChangesResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BizAssetChangesResp) SetBizAssetChangeResList(val []*BizEventAssetChangerRes) {
	p.BizAssetChangeResList = val
}
func (p *BizAssetChangesResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BizAssetChangesResp = map[int16]string{
	1:   "bizAssetChangeResList",
	255: "baseResp",
}

func (p *BizAssetChangesResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BizAssetChangesResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBizAssetChangeResList bool = false
	var issetBaseResp bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetBizAssetChangeResList = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetBaseResp = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBizAssetChangeResList {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetBaseResp {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BizAssetChangesResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BizAssetChangesResp[fieldId]))
}

func (p *BizAssetChangesResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.BizAssetChangeResList = make([]*BizEventAssetChangerRes, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewBizEventAssetChangerRes()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.BizAssetChangeResList = append(p.BizAssetChangeResList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *BizAssetChangesResp) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = base.NewBaseResp()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BizAssetChangesResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BizAssetChangesResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BizAssetChangesResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("bizAssetChangeResList", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.BizAssetChangeResList)); err != nil {
		return err
	}
	for _, v := range p.BizAssetChangeResList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BizAssetChangesResp) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("baseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BizAssetChangesResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BizAssetChangesResp(%+v)", *p)
}

func (p *BizAssetChangesResp) DeepEqual(ano *BizAssetChangesResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BizAssetChangeResList) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BizAssetChangesResp) Field1DeepEqual(src []*BizEventAssetChangerRes) bool {

	if len(p.BizAssetChangeResList) != len(src) {
		return false
	}
	for i, v := range p.BizAssetChangeResList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BizAssetChangesResp) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type BizEventAssetChangerRes struct {
	EventId     string           `thrift:"eventId,1,required" json:"eventId"`
	ChangeRes   bool             `thrift:"changeRes,2,required" json:"changeRes"`
	FailMsg     string           `thrift:"failMsg,3,required" json:"failMsg"`
	OpUserAsset *base0.UserAsset `thrift:"opUserAsset,4,optional" json:"opUserAsset,omitempty"`
}

func NewBizEventAssetChangerRes() *BizEventAssetChangerRes {
	return &BizEventAssetChangerRes{}
}

func (p *BizEventAssetChangerRes) GetEventId() (v string) {
	return p.EventId
}

func (p *BizEventAssetChangerRes) GetChangeRes() (v bool) {
	return p.ChangeRes
}

func (p *BizEventAssetChangerRes) GetFailMsg() (v string) {
	return p.FailMsg
}

var BizEventAssetChangerRes_OpUserAsset_DEFAULT *base0.UserAsset

func (p *BizEventAssetChangerRes) GetOpUserAsset() (v *base0.UserAsset) {
	if !p.IsSetOpUserAsset() {
		return BizEventAssetChangerRes_OpUserAsset_DEFAULT
	}
	return p.OpUserAsset
}
func (p *BizEventAssetChangerRes) SetEventId(val string) {
	p.EventId = val
}
func (p *BizEventAssetChangerRes) SetChangeRes(val bool) {
	p.ChangeRes = val
}
func (p *BizEventAssetChangerRes) SetFailMsg(val string) {
	p.FailMsg = val
}
func (p *BizEventAssetChangerRes) SetOpUserAsset(val *base0.UserAsset) {
	p.OpUserAsset = val
}

var fieldIDToName_BizEventAssetChangerRes = map[int16]string{
	1: "eventId",
	2: "changeRes",
	3: "failMsg",
	4: "opUserAsset",
}

func (p *BizEventAssetChangerRes) IsSetOpUserAsset() bool {
	return p.OpUserAsset != nil
}

func (p *BizEventAssetChangerRes) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEventId bool = false
	var issetChangeRes bool = false
	var issetFailMsg bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEventId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetChangeRes = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetFailMsg = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEventId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetChangeRes {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetFailMsg {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BizEventAssetChangerRes[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BizEventAssetChangerRes[fieldId]))
}

func (p *BizEventAssetChangerRes) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.EventId = v
	}
	return nil
}

func (p *BizEventAssetChangerRes) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.ChangeRes = v
	}
	return nil
}

func (p *BizEventAssetChangerRes) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.FailMsg = v
	}
	return nil
}

func (p *BizEventAssetChangerRes) ReadField4(iprot thrift.TProtocol) error {
	p.OpUserAsset = base0.NewUserAsset()
	if err := p.OpUserAsset.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BizEventAssetChangerRes) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BizEventAssetChangerRes"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BizEventAssetChangerRes) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("eventId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.EventId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BizEventAssetChangerRes) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("changeRes", thrift.BOOL, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.ChangeRes); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BizEventAssetChangerRes) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("failMsg", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FailMsg); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BizEventAssetChangerRes) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetOpUserAsset() {
		if err = oprot.WriteFieldBegin("opUserAsset", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.OpUserAsset.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *BizEventAssetChangerRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BizEventAssetChangerRes(%+v)", *p)
}

func (p *BizEventAssetChangerRes) DeepEqual(ano *BizEventAssetChangerRes) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EventId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ChangeRes) {
		return false
	}
	if !p.Field3DeepEqual(ano.FailMsg) {
		return false
	}
	if !p.Field4DeepEqual(ano.OpUserAsset) {
		return false
	}
	return true
}

func (p *BizEventAssetChangerRes) Field1DeepEqual(src string) bool {

	if strings.Compare(p.EventId, src) != 0 {
		return false
	}
	return true
}
func (p *BizEventAssetChangerRes) Field2DeepEqual(src bool) bool {

	if p.ChangeRes != src {
		return false
	}
	return true
}
func (p *BizEventAssetChangerRes) Field3DeepEqual(src string) bool {

	if strings.Compare(p.FailMsg, src) != 0 {
		return false
	}
	return true
}
func (p *BizEventAssetChangerRes) Field4DeepEqual(src *base0.UserAsset) bool {

	if !p.OpUserAsset.DeepEqual(src) {
		return false
	}
	return true
}

type PaymentService interface {
	ChangeAsset(ctx context.Context, req *BizAssetChangesReq) (r *BizAssetChangesResp, err error)
}

type PaymentServiceClient struct {
	c thrift.TClient
}

func NewPaymentServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *PaymentServiceClient {
	return &PaymentServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewPaymentServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *PaymentServiceClient {
	return &PaymentServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewPaymentServiceClient(c thrift.TClient) *PaymentServiceClient {
	return &PaymentServiceClient{
		c: c,
	}
}

func (p *PaymentServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *PaymentServiceClient) ChangeAsset(ctx context.Context, req *BizAssetChangesReq) (r *BizAssetChangesResp, err error) {
	var _args PaymentServiceChangeAssetArgs
	_args.Req = req
	var _result PaymentServiceChangeAssetResult
	if err = p.Client_().Call(ctx, "ChangeAsset", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type PaymentServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      PaymentService
}

func (p *PaymentServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *PaymentServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *PaymentServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewPaymentServiceProcessor(handler PaymentService) *PaymentServiceProcessor {
	self := &PaymentServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("ChangeAsset", &paymentServiceProcessorChangeAsset{handler: handler})
	return self
}
func (p *PaymentServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type paymentServiceProcessorChangeAsset struct {
	handler PaymentService
}

func (p *paymentServiceProcessorChangeAsset) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PaymentServiceChangeAssetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ChangeAsset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PaymentServiceChangeAssetResult{}
	var retval *BizAssetChangesResp
	if retval, err2 = p.handler.ChangeAsset(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ChangeAsset: "+err2.Error())
		oprot.WriteMessageBegin("ChangeAsset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ChangeAsset", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type PaymentServiceChangeAssetArgs struct {
	Req *BizAssetChangesReq `thrift:"req,1" json:"req"`
}

func NewPaymentServiceChangeAssetArgs() *PaymentServiceChangeAssetArgs {
	return &PaymentServiceChangeAssetArgs{}
}

var PaymentServiceChangeAssetArgs_Req_DEFAULT *BizAssetChangesReq

func (p *PaymentServiceChangeAssetArgs) GetReq() (v *BizAssetChangesReq) {
	if !p.IsSetReq() {
		return PaymentServiceChangeAssetArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *PaymentServiceChangeAssetArgs) SetReq(val *BizAssetChangesReq) {
	p.Req = val
}

var fieldIDToName_PaymentServiceChangeAssetArgs = map[int16]string{
	1: "req",
}

func (p *PaymentServiceChangeAssetArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PaymentServiceChangeAssetArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PaymentServiceChangeAssetArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PaymentServiceChangeAssetArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewBizAssetChangesReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PaymentServiceChangeAssetArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ChangeAsset_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PaymentServiceChangeAssetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PaymentServiceChangeAssetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentServiceChangeAssetArgs(%+v)", *p)
}

func (p *PaymentServiceChangeAssetArgs) DeepEqual(ano *PaymentServiceChangeAssetArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *PaymentServiceChangeAssetArgs) Field1DeepEqual(src *BizAssetChangesReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type PaymentServiceChangeAssetResult struct {
	Success *BizAssetChangesResp `thrift:"success,0,optional" json:"success,omitempty"`
}

func NewPaymentServiceChangeAssetResult() *PaymentServiceChangeAssetResult {
	return &PaymentServiceChangeAssetResult{}
}

var PaymentServiceChangeAssetResult_Success_DEFAULT *BizAssetChangesResp

func (p *PaymentServiceChangeAssetResult) GetSuccess() (v *BizAssetChangesResp) {
	if !p.IsSetSuccess() {
		return PaymentServiceChangeAssetResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PaymentServiceChangeAssetResult) SetSuccess(x interface{}) {
	p.Success = x.(*BizAssetChangesResp)
}

var fieldIDToName_PaymentServiceChangeAssetResult = map[int16]string{
	0: "success",
}

func (p *PaymentServiceChangeAssetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PaymentServiceChangeAssetResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PaymentServiceChangeAssetResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PaymentServiceChangeAssetResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewBizAssetChangesResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PaymentServiceChangeAssetResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ChangeAsset_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PaymentServiceChangeAssetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PaymentServiceChangeAssetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentServiceChangeAssetResult(%+v)", *p)
}

func (p *PaymentServiceChangeAssetResult) DeepEqual(ano *PaymentServiceChangeAssetResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PaymentServiceChangeAssetResult) Field0DeepEqual(src *BizAssetChangesResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
