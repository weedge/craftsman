// Code generated by thriftgo (0.2.3). DO NOT EDIT.

package base

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

type EventType int64

const (
	EventType_none         EventType = 0
	EventType_interactGift EventType = 1
	EventType_orderApple   EventType = 2
	EventType_orderWX      EventType = 3
	EventType_orderAlipay  EventType = 4
	EventType_orderDouyin  EventType = 5
)

func (p EventType) String() string {
	switch p {
	case EventType_none:
		return "none"
	case EventType_interactGift:
		return "interactGift"
	case EventType_orderApple:
		return "orderApple"
	case EventType_orderWX:
		return "orderWX"
	case EventType_orderAlipay:
		return "orderAlipay"
	case EventType_orderDouyin:
		return "orderDouyin"
	}
	return "<UNSET>"
}

func EventTypeFromString(s string) (EventType, error) {
	switch s {
	case "none":
		return EventType_none, nil
	case "interactGift":
		return EventType_interactGift, nil
	case "orderApple":
		return EventType_orderApple, nil
	case "orderWX":
		return EventType_orderWX, nil
	case "orderAlipay":
		return EventType_orderAlipay, nil
	case "orderDouyin":
		return EventType_orderDouyin, nil
	}
	return EventType(0), fmt.Errorf("not a valid EventType string")
}

func EventTypePtr(v EventType) *EventType { return &v }
func (p *EventType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = EventType(result.Int64)
	return
}

func (p *EventType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type BizType int64

const (
	BizType_none     BizType = 0
	BizType_live     BizType = 1
	BizType_recharge BizType = 2
)

func (p BizType) String() string {
	switch p {
	case BizType_none:
		return "none"
	case BizType_live:
		return "live"
	case BizType_recharge:
		return "recharge"
	}
	return "<UNSET>"
}

func BizTypeFromString(s string) (BizType, error) {
	switch s {
	case "none":
		return BizType_none, nil
	case "live":
		return BizType_live, nil
	case "recharge":
		return BizType_recharge, nil
	}
	return BizType(0), fmt.Errorf("not a valid BizType string")
}

func BizTypePtr(v BizType) *BizType { return &v }
func (p *BizType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = BizType(result.Int64)
	return
}

func (p *BizType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type AssetType int64

const (
	AssetType_none     AssetType = 0
	AssetType_goldCoin AssetType = 1
	AssetType_diamond  AssetType = 2
)

func (p AssetType) String() string {
	switch p {
	case AssetType_none:
		return "none"
	case AssetType_goldCoin:
		return "goldCoin"
	case AssetType_diamond:
		return "diamond"
	}
	return "<UNSET>"
}

func AssetTypeFromString(s string) (AssetType, error) {
	switch s {
	case "none":
		return AssetType_none, nil
	case "goldCoin":
		return AssetType_goldCoin, nil
	case "diamond":
		return AssetType_diamond, nil
	}
	return AssetType(0), fmt.Errorf("not a valid AssetType string")
}

func AssetTypePtr(v AssetType) *AssetType { return &v }
func (p *AssetType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = AssetType(result.Int64)
	return
}

func (p *AssetType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type UserAsset struct {
	UserId    int64     `thrift:"userId,1,required" json:"userId"`
	AssetType AssetType `thrift:"assetType,2,required" json:"assetType"`
	AssetCn   int64     `thrift:"assetCn,3,required" json:"assetCn"`
}

func NewUserAsset() *UserAsset {
	return &UserAsset{}
}

func (p *UserAsset) GetUserId() (v int64) {
	return p.UserId
}

func (p *UserAsset) GetAssetType() (v AssetType) {
	return p.AssetType
}

func (p *UserAsset) GetAssetCn() (v int64) {
	return p.AssetCn
}
func (p *UserAsset) SetUserId(val int64) {
	p.UserId = val
}
func (p *UserAsset) SetAssetType(val AssetType) {
	p.AssetType = val
}
func (p *UserAsset) SetAssetCn(val int64) {
	p.AssetCn = val
}

var fieldIDToName_UserAsset = map[int16]string{
	1: "userId",
	2: "assetType",
	3: "assetCn",
}

func (p *UserAsset) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetUserId bool = false
	var issetAssetType bool = false
	var issetAssetCn bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetUserId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetAssetType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetAssetCn = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetUserId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetAssetType {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetAssetCn {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UserAsset[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UserAsset[fieldId]))
}

func (p *UserAsset) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *UserAsset) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.AssetType = AssetType(v)
	}
	return nil
}

func (p *UserAsset) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.AssetCn = v
	}
	return nil
}

func (p *UserAsset) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UserAsset"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UserAsset) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UserAsset) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("assetType", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.AssetType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UserAsset) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("assetCn", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.AssetCn); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UserAsset) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserAsset(%+v)", *p)
}

func (p *UserAsset) DeepEqual(ano *UserAsset) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.AssetType) {
		return false
	}
	if !p.Field3DeepEqual(ano.AssetCn) {
		return false
	}
	return true
}

func (p *UserAsset) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *UserAsset) Field2DeepEqual(src AssetType) bool {

	if p.AssetType != src {
		return false
	}
	return true
}
func (p *UserAsset) Field3DeepEqual(src int64) bool {

	if p.AssetCn != src {
		return false
	}
	return true
}
